package com.moshi.common.model;

import com.moshi.common.model.base.BaseArticleComment;
import com.moshi.common.plugin.Letture;
import io.lettuce.core.api.sync.RedisCommands;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ArticleComment extends BaseArticleComment<ArticleComment> {
  public static final ArticleComment dao = new ArticleComment().dao();

  public static final int STATUS_ORDINARY = 0;
  public static final int STATUS_TOP = 1;

  public long getLikeCount() {
    Long cnt = Letture.sync().scard(String.format("like:article_comment:%d", getId()));
    return cnt == null ? 0 : cnt;
  }

  public boolean liked(int accountId) {
    return Letture.sync().sismember(String.format("like:article_comment:%d", getId()), accountId);
  }

  public boolean like(int accountId) {
    RedisCommands<String, Object> sync = Letture.sync();
    boolean has = sync.sismember(String.format("like:article_comment:%d", getId()), accountId);
    if (!has) {
      sync.sadd(String.format("like:article_comment:%d", getId()), accountId);
    }
    return !has;
  }

  public boolean unlike(int accountId) {
    RedisCommands<String, Object> sync = Letture.sync();
    boolean has = sync.sismember(String.format("like:article_comment:%d", getId()), accountId);
    if (has) {
      sync.srem(String.format("like:article_comment:%d", getId()), accountId);
    }
    return has;
  }
}
